package Work02;

import java.util.Scanner;


import static Work02.Unit01.Main.*;

public class MainUnit01 {

    private static int userIntegerInput(String msg) {
        Scanner sc = new Scanner(System.in);
        int inputStr;
        while (true) {
            System.out.print(msg);
            try {
                inputStr = Integer.parseInt(sc.next());
                break;
            } catch (NumberFormatException e) {
                System.out.println(red + "Неверный ввод! Введите целое число!" + reset);
            }
        }
        return inputStr;
    }

    public static void itemSelect() {  // Метод выбора по параметрам
        System.out.println(yellow + """
                \n1) Команда - "1" запускает выполнение задачи  № 1;
                1) Команда - "2" запускает выполнение задачи  № 2;
                3) Команда - "0" запускает выхода в предыдущее меню.
                                    
                Введите выбранную команду:""" + reset);

        int checkExit = 3;
        while (checkExit != 0) {
            checkExit = userIntegerInput("\nВведите номер команды. Для выхода в предыдущее меню нажмите 0.\nВвод: ");
            switch (checkExit) {
                case 1 -> {
                    System.out.println("\nВыполнение Задание №1 ... ");
                    MainTask();
                }
                case 2 -> {
                    System.out.println("\nВыполнение Задание №2 ... ");
                    System.out.println("\nТут пусто. В уроке было только одна задача");
                }
            }
            System.out.println(yellow + "\nВыполненеие завершено." + reset);
        }
    }

    public static void getAllItems() { // Выводит текстом какие задачи есть
        System.out.println("\n\tЗадание 1.\n");
        System.out.println("""
                Урок 1. Принципы ООП: Инкапсуляция, наследование, полиморфизм
                    Реализовать, с учетом ооп подхода, приложение
                    Для проведения исследований с генеалогическим древом.
                    Идея: описать некоторое количество компонент, например:
                    - модель человека
                    - компонента хранения связей и отношений между людьми: родитель, ребёнок - классика, но можно подумать\s
                    и про разные отношения
                    - компонент для проведения исследований
                    - дополнительные компоненты, например отвечающие за вывод данных в консоль, загрузку и сохранения в файл,
                                    
                    получение/построение отдельных моделей человека.
                    Под “проведением исследования” можно понимать получение всех детей выбранного человека.
                    * на первом этапе сложно применять сразу все концепты ООП, упор делается на инкапсуляцию.\s
                    Если получится продумать иерархию каких-то компонент - здорово. После первой лекции,\s
                    они не знают про абстракцию и интерфейсы
                                    
                    Продумать какие проблемы могут возникнуть в том, коде, который они написали.
                    Например, с генеалогическим древом, мы можем знать о двух людях, но не знаем в каких “отношениях” они были -\s
                    двоюродные или троюродные, или мы точно знаем как звали прапрабабушку, но совершенно не знаем прабабушку -\s
                    как хранить такие связи или что будет если в компоненту обхода передать ссылку на null-дерево.
                """);
    }

    public static void main(String[] args) {
        int checkExit = 3;
        while (checkExit != 0) {
            System.out.println(cyan + """
                    \n
                    1) Команда - "1" запускает меню выбора задач;
                    2) Команда - "0" запускает выход и завершение программы.
                    """ + reset);
            checkExit = userIntegerInput("""
                    Введите номер действия. Для выхода нажмите 0. \nВвод:\s
                    """);
            switch (checkExit) {
                case 1 -> itemSelect();
                case 2 -> getAllItems();
            }
        }
        System.out.println("""
                1) Команда - "1" запускает выполнение задачи  № 1;
                2) Команда - "0" запускает выход и завершение программы.
                                
                Введите выбранную команду:""");

    }

    public static final String reset = "\u001B[0m";
    public static final String red = "\u001B[31m";
    public static final String yellow = "\u001B[33m";
    public static final String cyan = "\u001B[36m";
}
